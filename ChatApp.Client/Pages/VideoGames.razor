@page "/videogames"
@attribute [Authorize]

@using ChatApp.Models
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Video Games</PageTitle>


    <input @bind="@messageInput" placeholder="Your message" />
    <button @onclick="SendMessage">Send</button>


<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private string Username;
    private string messageInput;
    private List<string> messages = new List<string>();
    
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            Username = user.Identity.Name;
        }
        
        Uri baseUrl = new Uri(Configuration["apiBaseUrl"]);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(baseUrl, "chathub"))
            .Build();
        
        await hubConnection.StartAsync();

        // Send a message when someone joins the chat page
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessage", "", $"{Username} has joined the chat", "Video Games");
        }

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, room) =>
        {
            if (room == "Video Games")
            {
                if (string.IsNullOrWhiteSpace(user))
                {
                    messages.Add(message);
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    var encodedMessage = $"{user}: {message}";
                    messages.Add(encodedMessage);
                    InvokeAsync(StateHasChanged);
                }
            }
        });
    }

    private async Task SendMessage()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessage", Username, messageInput, "Video Games");

            var messageLog = new MessageLogs
            {
                Room = "Video Games",
                Username = Username,
                Message = messageInput,
                Timestamp = DateTime.Now
            };

            Uri baseUrl = new Uri(Configuration["apiBaseUrl"]);
            var requestUri = new Uri(baseUrl, "MessagerLogs/logger");
            await Http.PostAsJsonAsync(requestUri, messageLog);

            messageInput = string.Empty;
            StateHasChanged();
        }
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessage", "", $"{Username} has left the chat", "Video Games");
        }
        await hubConnection.DisposeAsync();    }
}
