@page "/Chat/{Id}"
@attribute [Authorize]

@using ChatApp.Models
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@implements IAsyncDisposable

<h3>@(chatRoom.Name)</h3>
@if (!loading)
{
    <img src="@bannerUrl" alt="" style="max-width: 100%; height: auto;"/>

    <div class="message-bar">
        <input @bind="@messageInput" placeholder="Your message" />
        <button @onclick="SendMessage">Send</button>
    </div>


    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>  
    
    <div class="active-users">
        <h4>Active Users</h4>
        <ul>
            @foreach (var user in activeUsers)
            {
                <li>@user</li>
            }
        </ul>
    </div>
}
else
{
    <div>...loading...</div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private ChatRoom chatRoom = new ChatRoom();
    private HubConnection hubConnection;
    private string Username;
    private string messageInput;
    private List<string> messages = new List<string>();
    private string bannerUrl;
    private bool loading = true;
    private List<Tuple<string,string>> activeUsers = new List<Tuple<string,string>>();
    
     protected override async Task OnInitializedAsync()
    {
        Uri baseUrl = new Uri(Configuration["apiBaseUrl"]);
        var requestUri = new Uri(baseUrl, $"ChatRoom/GetChatRoom/{Id}");
        chatRoom = await Http.GetFromJsonAsync<ChatRoom>(requestUri);
        bannerUrl = chatRoom.Banner;
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            Username = user.Identity.Name;
        }
        
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(baseUrl, "chathub"))
            .Build();
        
        await hubConnection.StartAsync();

        loading = false;
        
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("JoinRoom", chatRoom.Name, Username);
        }

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, room) =>
        {
            if (room == chatRoom.Name)
            {
                if (string.IsNullOrWhiteSpace(user))
                {
                    messages.Add(message);
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    var encodedMessage = $"{user}: {message}";
                    messages.Add(encodedMessage);
                    InvokeAsync(StateHasChanged);
                }
            }
        });
        hubConnection.On<List<Tuple<string, string>>>("UpdateUserList", (users) =>
        {
            activeUsers = users;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task SendMessage()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessage", Username, messageInput, chatRoom.Name);

            var messageLog = new MessageLogs
            {
                Room = chatRoom.Name,
                Username = Username,
                Message = messageInput,
                Timestamp = DateTime.Now
            };

            Uri baseUrl = new Uri(Configuration["apiBaseUrl"]);
            var requestUri = new Uri(baseUrl, "MessagerLogs/logger");
            await Http.PostAsJsonAsync(requestUri, messageLog);

            messageInput = string.Empty;
            StateHasChanged();
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("LeaveRoom", chatRoom.Name, Username);
        }
        await hubConnection.DisposeAsync();
    }   
}